/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DealerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.GarageEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.EnvironmentComplianceCheckOrganization;
import Business.Organization.InspectionOrganization;
import Business.UserAccount.UserAccount;
import Business.Automobile.Automobile;
import Business.Automobile.Specifications;
import Business.WorkQueue.GarageWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author akhilsaikoppanatham
 */
public class ManageAutomobilesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    JPanel container;
    Enterprise enterprise;
    private UserAccount account;
    EcoSystem business;
    Automobile automobile;

    public ManageAutomobilesJPanel(JPanel container, Enterprise enterprise, UserAccount account, Automobile patient, EcoSystem business) {
        initComponents();
        this.container = container;
        this.enterprise = enterprise;
        this.account = account;
        this.business = business;
        this.automobile = patient;
        automobileName.setText(patient.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        engineTransmission = new javax.swing.JCheckBox();
        gasLeakage = new javax.swing.JCheckBox();
        exhaustSystem = new javax.swing.JCheckBox();
        testingStatus = new javax.swing.JButton();
        oil = new javax.swing.JCheckBox();
        brakeTesting = new javax.swing.JCheckBox();
        referToTest = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ignitionTextField = new javax.swing.JTextField();
        mileageTextField = new javax.swing.JTextField();
        lengthTextField = new javax.swing.JTextField();
        weightTextField = new javax.swing.JTextField();
        rpmTextField = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        automobileName = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Car Brand & Model :");

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | java.awt.Font.BOLD, 14));
        jLabel2.setText("Car Diagnostic Tests");

        engineTransmission.setBackground(new java.awt.Color(255, 255, 255));
        engineTransmission.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        engineTransmission.setText("Engine Transmission");

        gasLeakage.setBackground(new java.awt.Color(255, 255, 255));
        gasLeakage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        gasLeakage.setText("Gas Leakage");

        exhaustSystem.setBackground(new java.awt.Color(255, 255, 255));
        exhaustSystem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        exhaustSystem.setText("Exhaust System");

        testingStatus.setBackground(new java.awt.Color(88, 177, 159));
        testingStatus.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        testingStatus.setText("Diagnostic Status");
        testingStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingStatusActionPerformed(evt);
            }
        });

        oil.setBackground(new java.awt.Color(255, 255, 255));
        oil.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        oil.setText("Oil");
        oil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oilActionPerformed(evt);
            }
        });

        brakeTesting.setBackground(new java.awt.Color(255, 255, 255));
        brakeTesting.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        brakeTesting.setText("Brake Testing");

        referToTest.setBackground(new java.awt.Color(88, 177, 159));
        referToTest.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        referToTest.setText("Refer to Garage");
        referToTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referToTestActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Ignition Level");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Mileage in mpg");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Automobile Length");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Vehicle Weight");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Engine RPM");

        weightTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightTextFieldActionPerformed(evt);
            }
        });

        saveBtn.setBackground(new java.awt.Color(88, 177, 159));
        saveBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Images/doctor.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        backJButton.setBackground(new java.awt.Color(88, 177, 159));
        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Images/back.png"))); // NOI18N
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        automobileName.setEnabled(false);
        automobileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automobileNameActionPerformed(evt);
            }
        });

        jLabel17.setBackground(new java.awt.Color(255, 255, 255));
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Images/vitalSigns.JPG"))); // NOI18N
        jLabel17.setText("jLabel17");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(49, 49, 49)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saveBtn)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(rpmTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                                .addComponent(weightTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lengthTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(mileageTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ignitionTextField, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addComponent(automobileName, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(121, 121, 121)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(engineTransmission)
                                            .addComponent(brakeTesting)
                                            .addComponent(exhaustSystem)
                                            .addComponent(referToTest)
                                            .addComponent(testingStatus)
                                            .addComponent(jLabel2)
                                            .addComponent(oil)
                                            .addComponent(gasLeakage)))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backJButton)))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(backJButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(automobileName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ignitionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mileageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel7)
                                            .addComponent(lengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel8)
                                            .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18))
                                    .addComponent(rpmTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addComponent(saveBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(oil)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gasLeakage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(engineTransmission)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(brakeTesting)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(exhaustSystem)
                                .addGap(47, 47, 47)
                                .addComponent(referToTest, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(testingStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(671, 671, 671))
        );
    }// </editor-fold>//GEN-END:initComponents
 public void disableAll() {
        engineTransmission.setEnabled(false);
        gasLeakage.setEnabled(false);
        oil.setEnabled(false);
        brakeTesting.setEnabled(false);
        exhaustSystem.setEnabled(false);
        ignitionTextField.setEnabled(false);
        mileageTextField.setEnabled(false);
        lengthTextField.setEnabled(false);
        weightTextField.setEnabled(false);
        rpmTextField.setEnabled(false);
    }

    public void clearAll() {
        engineTransmission.setSelected(false);
        gasLeakage.setSelected(false);
        oil.setSelected(false);
        brakeTesting.setSelected(false);
        exhaustSystem.setSelected(false);
    }

    private void testingStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingStatusActionPerformed
        List<String> tests = new ArrayList();
        if (oil.isSelected()) {
            tests.add("Oil");
        }
        if (gasLeakage.isSelected()) {
            tests.add("Gas Leakage");
        }
        if (engineTransmission.isSelected()) {
            tests.add("Engine Transmission");
        }
        if (brakeTesting.isSelected()) {
            tests.add("Brake Testing");
        }
        if (exhaustSystem.isSelected()) {
            tests.add("Exhaust System");
        }
        Iterator i = tests.iterator();
        System.out.println("here");
        while (i.hasNext()) {
            System.out.println(i.next());
        }
        TestResultsJPanel patientTestRequestJPanel;
        patientTestRequestJPanel = new TestResultsJPanel(container, enterprise, account, automobile.getName(), tests, automobile);
        container.add("DoctorActivityJPanel", patientTestRequestJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_testingStatusActionPerformed

    private void referToTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referToTestActionPerformed
        try {
            if (automobile.getCurrentSpecification() == null) {
                JOptionPane.showMessageDialog(null, "Please save Vechicle Specs before referring for diagnostic tests");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please save Vechicle Specs before referring for diagnostic tests");
            return;
        }
        if (oil.isSelected() == false && gasLeakage.isSelected() == false && engineTransmission.isSelected() == false && exhaustSystem.isSelected() == false && brakeTesting.isSelected() == false) {
            JOptionPane.showMessageDialog(null, "Please advice some Diagnostic test!");
            return;
        }
        if (oil.isSelected()) {
            Organization o = null;
            String name = automobileName.getText();
            for (Network n : business.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof GarageEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof InspectionOrganization) {
                                o = org;

                            }
                        }
                    }
                }
            }
            if (o != null) {

                if (o.getWorkQueue().searchRequest(name, "Oil")) {
                    JOptionPane.showMessageDialog(null, "Oil test report has already been requested for this patient");
                    oil.setSelected(false);
                    return;
                }
                GarageWorkRequest request = new GarageWorkRequest();
                request.setMessage("Screening Dept - please look into this issue");
                request.setSender(account);
                request.setStatus("Sent");
                request.setAutomobileName(name);
                request.setTestName("Oil");
                o.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            } else {
                JOptionPane.showMessageDialog(null, "InspectionOrganization doesn't exist");
                return;
            }
        }
        if (gasLeakage.isSelected()) {
            Organization o = null;
            String name = automobileName.getText();
            for (Network n : business.getNetworkList()) {

                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof GarageEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof InspectionOrganization) {
                                o = org;

                            }
                        }
                    }
                }
            }
            if (o != null) {
                if (o.getWorkQueue().searchRequest(name, "Gas Leakage")) {
                    JOptionPane.showMessageDialog(null, "Gas Leakage test report has already been requested for this patient");
                    gasLeakage.setSelected(false);
                    return;
                }
                GarageWorkRequest request = new GarageWorkRequest();
                request.setMessage("Screening Dept - please look into this issue");
                request.setSender(account);
                request.setStatus("Sent");
                request.setAutomobileName(name);
                request.setTestName("Gas Leakage");
                o.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            } else {
                JOptionPane.showMessageDialog(null, "InspectionOrganization doesn't exist");
                return;
            }
        }
        if (engineTransmission.isSelected()) {
            Organization o = null;
            String name = automobileName.getText();
            for (Network n : business.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof GarageEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof InspectionOrganization) {
                                o = org;
                            }
                        }
                    }
                }
            }
            if (o != null) {
                if (o.getWorkQueue().searchRequest(name, "Engine Transmission")) {
                    JOptionPane.showMessageDialog(null, "Engine Transmission test report has already been requested for this patient");
                    engineTransmission.setSelected(false);
                    return;
                }
                GarageWorkRequest request = new GarageWorkRequest();
                request.setMessage("Screening Dept - please look into this issue");
                request.setSender(account);
                request.setStatus("Sent");
                request.setAutomobileName(name);
                request.setTestName("Engine Transmission");
                o.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);

            } else {
                JOptionPane.showMessageDialog(null, "InspectionOrganization doesn't exist");
                return;
            }
        }
        if (brakeTesting.isSelected()) {
            Organization o = null;
            String name = automobileName.getText();
            for (Network n : business.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof GarageEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof EnvironmentComplianceCheckOrganization) {
                                o = org;

                            }
                        }
                    }
                }
            }
            if (o != null) {
                if (o.getWorkQueue().searchRequest(name, "Brake Testing")) {
                    JOptionPane.showMessageDialog(null, "Brake Testing report has already been requested for this patient");
                    brakeTesting.setSelected(false);
                    return;
                }

                GarageWorkRequest request = new GarageWorkRequest();
                request.setMessage("Environment Compliance Department is currently looking into this issue");
                request.setSender(account);
                request.setStatus("Sent");
                request.setAutomobileName(name);
                request.setTestName("Brake Testing");
                o.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);

            } else {
                JOptionPane.showMessageDialog(null, "EnvironmentComplianceCheckOrganization doesn't exist");
                return;
            }
        }
        if (exhaustSystem.isSelected()) {
            Organization o = null;
            String name = automobileName.getText();
            for (Network n : business.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof GarageEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof EnvironmentComplianceCheckOrganization) {
                                o = org;

                            }
                        }
                    }
                }
            }
            if (o != null) {
                if (o.getWorkQueue().searchRequest(name, "Exhaust System")) {
                    JOptionPane.showMessageDialog(null, "Exhaust System report has already been requested for this patient");
                    exhaustSystem.setSelected(false);
                    return;
                }
                GarageWorkRequest request = new GarageWorkRequest();
                request.setMessage("Environment Compliance Department is currently looking into this issue");
                request.setSender(account);
                request.setStatus("Sent");
                request.setAutomobileName(name);
                request.setTestName("Exhaust System");
                o.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);

            } else {
                JOptionPane.showMessageDialog(null, "EnvironmentComplianceCheckOrganization doesn't exist");
                return;
            }
        }
        if (oil.isSelected() == true || gasLeakage.isSelected() == true || engineTransmission.isSelected() == true) {
            JOptionPane.showMessageDialog(null, "Automobile Sent to Inspection for initial !");

        }
        if (exhaustSystem.isSelected() == true || brakeTesting.isSelected() == true) {
            JOptionPane.showMessageDialog(null, "Automobile Sent to Compliance Check Department for initial Check!");
        }
        clearAll();
    }//GEN-LAST:event_referToTestActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        //all fields should be filled
        if (ignitionTextField.equals("") || mileageTextField.equals("") || lengthTextField.equals("") || weightTextField.equals("") || rpmTextField.equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill all the details.");
            return;
        }
        int ignition;
        int mileage;
        int length;
        int engineRPM;
        float automobileWeight;
        try {
            ignition = Integer.parseInt(ignitionTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid Ignition Level");
            ignitionTextField.setText("");
            return;
        }
        try {
            mileage = Integer.parseInt(mileageTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid Mileage");
            mileageTextField.setText("");
            return;
        }
        try {

            length = Integer.parseInt(lengthTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid Body length or not eligible length");
            lengthTextField.setText("");
            return;
        }
        try {
            automobileWeight = Float.parseFloat(weightTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid Vehicle Weight");
            weightTextField.setText("");
            return;
        }
        try {
            engineRPM = Integer.parseInt(rpmTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid Engine RPM");
            rpmTextField.setText("");
            return;
        }
        Automobile automobile = this.automobile;
        if (automobile.getCurrentSpecification() == null) {
            Specifications newSpecification = new Specifications();
            newSpecification.setIgnitionLevel(ignition);
            newSpecification.setMileage(mileage);
            newSpecification.setEngineRPM(engineRPM);
            newSpecification.setBodyLength(length);
            newSpecification.setAutomobileWeight(automobileWeight);
            automobile.setCurrentSpecification(newSpecification);
        } else {
            Specifications specifications = automobile.newSpecification(automobile.getCurrentSpecification());
            specifications.setIgnitionLevel(ignition);
            specifications.setMileage(mileage);
            specifications.setEngineRPM(engineRPM);
            specifications.setBodyLength(length);
            specifications.setAutomobileWeight(automobileWeight);
        }
        JOptionPane.showMessageDialog(null, "Automobile Specifications are saved");
        int ignitionLevel3 = this.automobile.getCurrentSpecification().getIgnitionLevel();
        int mileage3 = this.automobile.getCurrentSpecification().getMileage();
        int engineRPM3 = this.automobile.getCurrentSpecification().getEngineRPM();
        int bodyLength3 = this.automobile.getCurrentSpecification().getBodyLength();
        float vehicleWeight3 = this.automobile.getCurrentSpecification().getAutomobileWeight();
        if (!this.automobile.isAutomobileInGoodCondition(this.automobile.getAge(), mileage3, engineRPM3, ignitionLevel3, vehicleWeight3, bodyLength3)) {
            JOptionPane.showMessageDialog(null, "Automobile is not eligible for inspection! The specifications violate our terms and conditions");
            boolean eligible = false;
            this.automobile.setAutomobile(eligible);
            this.automobile.setStatus("Completed");
            CardLayout layout = (CardLayout) container.getLayout();
            container.remove(this);
            layout.previous(container);
            Component[] comps = this.container.getComponents();
            for (Component comp : comps) {
                if (comp instanceof DealerWorkAreaJPanel) {
                    DealerWorkAreaJPanel doctorWorkAreaJPanel = (DealerWorkAreaJPanel) comp;
                    doctorWorkAreaJPanel.populateTable();
                }
            }
            return;
        }
        ignitionTextField.setText("");
        mileageTextField.setText("");
        lengthTextField.setText("");
        weightTextField.setText("");
        rpmTextField.setText("");
    }//GEN-LAST:event_saveBtnActionPerformed

    private void oilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oilActionPerformed

    }//GEN-LAST:event_oilActionPerformed

    private void weightTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightTextFieldActionPerformed

    }//GEN-LAST:event_weightTextFieldActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        DealerWorkAreaJPanel dwjp = (DealerWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void automobileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automobileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_automobileNameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField automobileName;
    private javax.swing.JButton backJButton;
    private javax.swing.JCheckBox brakeTesting;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox engineTransmission;
    private javax.swing.JCheckBox exhaustSystem;
    private javax.swing.JCheckBox gasLeakage;
    private javax.swing.JTextField ignitionTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField lengthTextField;
    private javax.swing.JTextField mileageTextField;
    private javax.swing.JCheckBox oil;
    private javax.swing.JButton referToTest;
    private javax.swing.JTextField rpmTextField;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton testingStatus;
    private javax.swing.JTextField weightTextField;
    // End of variables declaration//GEN-END:variables
}
